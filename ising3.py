'''Edits'''
from multiprocessing import Pool
import random as rand
from random import randint
import numpy as np
import matplotlib.pyplot as plt


def Ising_Energy(JT):
        N = 16
        s = [[-3.14 for a in range(N)] for a in range(N)]
        print s
        Groups = 2**3

        steps = 2**23
#        Groups = 2**5
        Measurements = 2**6
        C_Time = 2**16
        #print s
        Z = 0.0   #Number of steps
        Ising_Energy = -2*N**2
        EI = 0.
        E_I = [0. for i in range(Measurements)]
        for i in range(steps):
            s_pend = rand.uniform(-3.14,3.14)
            Avg_Theta = 0.
            dE1 = 0.0
            dE2 = 0.
            k1 = rand.randint(0 , N-1)
            k2 = rand.randint(0 , N-1)
            dEI = 0.
            dE_I = 0.

            for n in range(Measurements):         #Take Measurements
                if i == ((n+1)*C_Time):
                    Z += 1
                    EI += Ising_Energy
                    E_I[n] = Ising_Energy


            I = k1-1
            if I >= 0:
                dE1 += np.cos(s_pend-s[I][k2])
                dE2 += np.cos(s[k1][k2]-s[I][k2])
            else:
                dE1 += np.cos(s_pend-s[N-1][k2])
                dE2 += np.cos(s[k1][k2]-s[N-1][k2])

            I = k1 + 1
            if I <= N-1:
                dE1 += np.cos(s_pend-s[I][k2])
                dE2 += np.cos(s[k1][k2]-s[I][k2])

            else:
                dE1 += np.cos(s_pend-s[0][k2])
                dE2 += np.cos(s[k1][k2]-s[0][k2])

            I = k2 + 1
            if I <= N-1:
                dE1 += np.cos(s_pend-s[k1][I])
                dE2 += np.cos(s[k1][k2]-s[k1][I])
            else:
                dE1 += np.cos(s_pend-s[k1][0])
                dE2 += np.cos(s[k1][k2]-s[k1][0])

            I = k2 - 1
            if I >= 0:
                dE1 += np.cos(s_pend-s[k1][I])
                dE2 += np.cos(s[k1][k2]-s[k1][I])
            else:
                dE1 += np.cos(s_pend-s[k1][N-1])
                dE2 += np.cos(s[k1][k2]-s[k1][N-1])


            dEI += -JT*(dE1-dE2)


            R = np.exp(-dEI)           ##Acceptance Ratio


            '''Whether or not to accept the state and change Magnetizations and Energy'''
            if (R >= 1) or (rand.random() < R):
                Ising_Energy += dEI/JT
                s[k1][k2] = s_pend
        '''Calculate Jackknife error'''
        B_Block2 = [0.0 for i in range(Groups)]   # group averaging of Standard Energies
        for a in range(Groups):                 #G is number of groups
            for c in range(Measurements/Groups):       #steps/G is number of elements per group
                B_Block2[a] += E_I[(a*Measurements/Groups) + c]/(Measurements/Groups)
        B_Block_Div2 = [0.0 for a in range(Groups)]
        st_dev2 = [0.0 for a in range(Groups)]
        st_devR = 0.0
        st_devS = 0.0
        jack_knifeS = 0.0
        for i in range(Groups):              ## implementing jackknife method
            for a in range(Groups):
                if a <> i:
                    B_Block_Div2[i] += B_Block2[a]
                else:
                    B_Block_Div2[i] += 0
        for i in range(Groups):
            B_Block_Div2[i] = B_Block_Div2[i]/(Groups-1)
        for a in range(Groups):
            st_dev2[a] =(float(B_Block_Div2[a]-EI/Z))**2
        for a in range(Groups):
            jack_knifeS += st_dev2[a]
        jack_knife_s = np.sqrt(jack_knifeS)/Groups**2



        '''bootstrap = 0.0
        B_Block2 = [0.0 for i in range(Groups)]
        for a in range(Groups):
            for b in range(Measurements/Groups):
                B_Block2[a] += M1_est[randint(0,Measurements-1)]
        for a in range(Groups):
            B_Block2[a] = B_Block2[a]/(Measurements/Groups)
        print B_Block2
        for a in range(Groups):
            bootstrap += (B_Block2[a]-A/Z)**2
        bootstrap = np.sqrt(bootstrap/Groups)'''


        Avg_S_Energy = EI/Z
#        print(E_Replica)
#        print(E_s)
#        print("Replica")
#        print(Avg_Replica_Energy)
#        print("Avg_S_Energy")
        return Avg_S_Energy


def A_Energy(JT):
        N = 16
        s = [[-3.14 for a in range(N)] for a in range(N)]
        Groups = 2**3

        steps = 2**23
        Measurements = 2**6
        C_Time = 2**16
        Z = 0.0   #Number of Measurements
        Ising_Energy = -4*N**2
        EI = 0.
        A_Energies = [0. for i in range(Measurements)]

        for i in range(steps):
            s_pend = rand.uniform(-3.14,3.14)
            Avg_Theta = 0.
            dE1 = 0.0
            dE2 = 0.
            k1 = rand.randint(0 , N-1)
            k2 = rand.randint(0 , N-1)
            dEI = 0.
            dE_I = 0.

            for n in range(Measurements):         #Take Measurements
                if i == ((n+1)*C_Time):
                    Z += 1
                    EI += Ising_Energy
                    A_Energies[n] = Ising_Energy


            I = k1-1
            if I >= 0:
                dE1 += np.cos(s_pend-s[I][k2])
                dE2 += np.cos(s[k1][k2]-s[I][k2])
            else:
                dE1 += np.cos(s_pend-s[N-1][k2])
                dE2 += np.cos(s[k1][k2]-s[N-1][k2])

            I = k1 + 1
            if I <= N-1:
                dE1 += np.cos(s_pend-s[I][k2])
                dE2 += np.cos(s[k1][k2]-s[I][k2])

            else:
                dE1 += np.cos(s_pend-s[0][k2])
                dE2 += np.cos(s[k1][k2]-s[0][k2])

            I = k2 + 1
            if I <= N-1:
                dE1 += np.cos(s_pend-s[k1][I])
                dE2 += np.cos(s[k1][k2]-s[k1][I])
            else:
                dE1 += np.cos(s_pend-s[k1][0])
                dE2 += np.cos(s[k1][k2]-s[k1][0])

            I = k2 - 1
            if I >= 0:
                dE1 += np.cos(s_pend-s[k1][I])
                dE2 += np.cos(s[k1][k2]-s[k1][I])
            else:
                dE1 += np.cos(s_pend-s[k1][N-1])
                dE2 += np.cos(s[k1][k2]-s[k1][N-1])


            dEI += -2*JT*(dE1-dE2)


            R = np.exp(-dEI)           ##Acceptance Ratio


            '''Whether or not to accept the state and change Magnetizations and Energy'''
            if (R >= 1) or (rand.random() < R):
                Ising_Energy += dEI/JT
                s[k1][k2] = s_pend
        return EI/Z, A_Energies

def Replica_Energy(JT):        #N is Dimension of Matrix
        N = 16
        s = [[-3.14 for a in range(N)] for a in range(N)]
        Groups = 2**3
        s2 = [[-3.14 for a in range(N)] for a in range(N)]

        steps = 2**23
        Measurements = 2**6

        Replica_Energies = [0. for a in range(Measurements)]
        C_Time = 2**16
        Z = 0.0   #Number of steps
        Replica_Energy = -4*N**2
        ER = 0.0

        for i in range(steps):
            dE1_s = 0.0
            dE2_s = 0.0

            dE1_s2 = 0.
            dE2_s2 = 0.

            dER1 = 0.
            dER2 = 0.

            k1 = rand.randint(0 , N-1)
            k2 = rand.randint(0 , N-1)


            for n in range(Measurements):         #Take Measurements
                if i == ((n+1)*C_Time):
                    Replica_Energies[n] = Replica_Energy
                    Z += 1
                    ER += Replica_Energy
            if k1 <= N/2-1:


                if rand.random() < 0.5:
                    s_pend = rand.uniform(-3.14,3.14)
                else:
                    s_pend = s[k1][k2]
                if rand.random() < 0.5:
                    s2_pend = rand.uniform(-3.14,3.14)
                else:
                    s2_pend = s2[k1][k2]

                I = k1 + 1
                if I <= N-1:
                    dE1_s += np.cos(s_pend-s[I][k2])
                    dE2_s += np.cos(s[k1][k2]-s[I][k2])

                    dE1_s2 += np.cos(s2_pend-s2[I][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[I][k2])

                I = k1 - 1
                if I >= 0:
                    dE1_s += np.cos(s_pend-s[I][k2])
                    dE2_s += np.cos(s[k1][k2]-s[I][k2])

                    dE1_s2 += np.cos(s2_pend-s2[I][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[I][k2])

                else:
                    dE1_s += np.cos(s_pend-s[N-1][k2])
                    dE2_s += np.cos(s[k1][k2]-s[N-1][k2])

                    dE1_s2 += np.cos(s2_pend-s2[N-1][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[N-1][k2])


                I = k2 + 1
                if I <= N-1:
                    dE1_s += np.cos(s_pend-s[k1][I])
                    dE2_s += np.cos(s[k1][k2]-s[k1][I])

                    dE1_s2 += np.cos(s2_pend-s2[k1][I])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][I])


                else:
                    dE1_s += np.cos(s_pend-s[k1][0])
                    dE2_s += np.cos(s[k1][k2]-s[k1][0])

                    dE1_s2 += np.cos(s2_pend-s2[k1][0])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][0])

                I = k2 - 1
                if I >= 0:
                    dE1_s += np.cos(s_pend-s[k1][I])
                    dE2_s += np.cos(s[k1][k2]-s[k1][I])

                    dE1_s2 += np.cos(s2_pend-s2[k1][I])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][I])

                else:
                    dE1_s += np.cos(s_pend-s[k1][N-1])
                    dE2_s += np.cos(s[k1][k2]-s[k1][N-1])

                    dE1_s2 += np.cos(s2_pend-s2[k1][N-1])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][N-1])

                if s[k1][k2] == s_pend:
                    dER1 += 0.
                else:
                    dER1 += -JT*(dE1_s - dE2_s)



                if s2[k1][k2] == s2_pend:
                    dER2 += 0.
                else:
                    dER2 += -JT*(dE1_s2-dE2_s2)

            else:
                s_pend = rand.uniform(-3.14, 3.14)
                s2_pend = s_pend

                I = k1-1
                if I >= 0:
                    dE1_s += np.cos(s_pend-s[I][k2])
                    dE2_s += np.cos(s[k1][k2]-s[I][k2])

                    dE1_s2 += np.cos(s2_pend-s2[I][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[I][k2])
                else:
                    dE1_s += np.cos(s_pend - s[N-1][k2])
                    dE2_s += np.cos(s[k1][k2] - s[N-1][k2])

                    dE1_s2 += np.cos(s2_pend - s2[N-1][k2])
                    dE2_s2 += np.cos(s2[k1][k2] - s2[N-1][k2])

                I = k1 + 1
                if I <= N-1:
                    dE1_s += np.cos(s_pend-s[I][k2])
                    dE2_s += np.cos(s[k1][k2]-s[I][k2])

                    dE1_s2 += np.cos(s2_pend-s2[I][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[I][k2])
                else:
                    dE1_s += np.cos(s_pend-s[0][k2])
                    dE2_s += np.cos(s[k1][k2]-s[0][k2])

                    dE1_s2 += np.cos(s2_pend-s2[0][k2])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[0][k2])

                I = k2 + 1
                if I <= N-1:
                    dE1_s += np.cos(s_pend-s[k1][I])
                    dE2_s += np.cos(s[k1][k2]-s[k1][I])

                    dE1_s2 += np.cos(s2_pend-s2[k1][I])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][I])
                else:
                    dE1_s += np.cos(s_pend-s[k1][0])
                    dE2_s += np.cos(s[k1][k2]-s[k1][0])

                    dE1_s2 += np.cos(s2_pend-s2[k1][0])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][0])


                I = k2 - 1
                if I >= 0:
                    dE1_s += np.cos(s_pend-s[k1][I])
                    dE2_s += np.cos(s[k1][k2]-s[k1][I])

                    dE1_s2 += np.cos(s2_pend-s2[k1][I])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][I])
                else:
                    dE1_s += np.cos(s_pend-s[k1][N-1])
                    dE2_s += np.cos(s[k1][k2]-s[k1][N-1])

                    dE1_s2 += np.cos(s2_pend-s2[k1][N-1])
                    dE2_s2 += np.cos(s2[k1][k2]-s2[k1][N-1])



                dER1 += -JT*(dE1_s-dE2_s)
                dER2 += -JT*(dE1_s2-dE2_s2)


            R = np.exp(-dER1-dER2)           ##Acceptance Ratio


            '''Whether or not to accept the state and change Magnetizations and Energy'''
            if (R >= 1) or (rand.random() < R):
                if k1 > N/2-1:
                    Replica_Energy += dER1/JT
                    Replica_Energy += dER2/JT

                    s[k1][k2] = s_pend
                    s2[k1][k2] = s_pend
                else:
                    if s[k1][k2] == s_pend:
                        Replica_Energy += 0.
                    else:
                        Replica_Energy += dER1/JT

                        s[k1][k2] = s_pend

                    if s2[k1][k2] == s2_pend:
                        Replica_Energy += 0.
                    else:
                        Replica_Energy += dER2/JT

                        s2[k1][k2] = s2_pend

        Avg_Replica_Energy = ER/Z
        return Avg_Replica_Energy, Replica_Energies


        '''Calculate Jackknife error'''

'''        B_Block = [0.0 for i in range(Groups)]    # group averaging of Replica Energies
        B_Block2 = [0.0 for i in range(Groups)]   # group averaging of Standard Energies
        for a in range(Groups):                 #G is number of groups
            for c in range(Measurements/Groups):       #steps/G is number of elements per group
                B_Block[a] += E_Replica[(a*Measurements/Groups) + c]/(Measurements/Groups)
                B_Block2[a] += E_s[(a*Measurements/Groups) + c]/(Measurements/Groups)
        B_Block_Div = [0.0 for a in range(Groups)]
        B_Block_Div2 = [0.0 for a in range(Groups)]
        st_dev = [0.0 for a in range(Groups)]
        st_dev2 = [0.0 for a in range(Groups)]
        st_devR = 0.0
        st_devS = 0.0
        jack_knifeR = 0.0
        jack_knifeS = 0.0
        for i in range(Groups):              ## implementing jackknife method
            for a in range(Groups):
                if a <> i:
                    B_Block_Div[i] += B_Block[a]
                    B_Block_Div2[i] += B_Block2[a]
                else:
                    B_Block_Div[i] += 0
                    B_Block_Div2[i] += 0
        for i in range(Groups):
            B_Block_Div[i] = B_Block_Div[i]/(Groups-1)
            B_Block_Div2[i] = B_Block_Div2[i]/(Groups-1)
        for a in range(Groups):
            st_dev[a] = (float(B_Block_Div[a]-ER/Z))**2
            st_dev2[a] =(float(B_Block_Div2[a]-ES/Z))**2
        for a in range(Groups):
            jack_knifeR += st_dev[a]
            jack_knifeS += st_dev2[a]
        jack_knife_replica = np.sqrt(jack_knifeR)/Groups**2
        jack_knife_s = np.sqrt(jack_knifeS)/Groups**2


        bootstrap = 0.0
        B_Block2 = [0.0 for i in range(Groups)]
        for a in range(Groups):
            for b in range(Measurements/Groups):
                B_Block2[a] += M1_est[randint(0,Measurements-1)]
        for a in range(Groups):
            B_Block2[a] = B_Block2[a]/(Measurements/Groups)
        print B_Block2
        for a in range(Groups):
            bootstrap += (B_Block2[a]-A/Z)**2
        bootstrap = np.sqrt(bootstrap/Groups)'''



def Renyi_Entropy(T_lower, T_upper, dT):
    N = 16
    Beta = [1/(i*dT + dT) for i in range(int((T_upper-T_lower)/dT))]
    Temps2 = [i*dT + dT for i in range(int((T_upper-T_lower)/dT))]
    Replica_Energies = [0. for i in range(int((T_upper-T_lower)/dT))]
    S_Energies = [0. for i in range(int((T_upper-T_lower)/dT))]
    S_Error = [0. for i in range(int((T_upper-T_lower)/dT))]
    I_AB = [0. for i in range(int((T_upper-T_lower)/dT))]

    R_Error = [0. for i in range(int((T_upper-T_lower)/dT))]
    pool = Pool(processes = 8)
#    print "Starting Pool"
#    Results = pool.map(Replica_Energy, Beta)
#    print "Results:"
#    print Results

#    Results = [-984.8654593738255, -945.13054442110024, -899.34532303703577, -848.26509549839329, -788.97602065812941, -706.57024452493329, -633.97940272253754, -563.791974810478, -508.92427110498943, -457.57860594508657, -421.94620252927558, -366.19056793083661, -335.80116980082647, -305.47555833440981, -277.46289845295956, -258.07634916355215, -241.12773076363797, -229.20801739192913, -212.76235049046002, -196.70426470165401, -187.40040563588457, -175.91596050662591, -175.35501484663936, -166.87542192866334, -154.50045694158362, -151.83185529063431, -145.30742628743954, -140.53426010442917, -135.28206720184863, -127.94690015468105, -114.22751475578282, -116.31729100944042, -113.70219797294951, -116.97899187136714, -111.7957980987857, -102.62302031185051, -99.472975921917424, -99.512101714746933, -92.396090284272475, -96.660544579123865, -91.500568678299956, -94.260385410648041, -85.40002732613388, -89.979791141010395, -86.888898573137794, -81.491087079713779, -87.578994833206366, -75.885237998582085, -77.359420780484911]
#    Results2 = [(-485.81748749036979, 0.0046362385248580936, 0.2), (-457.2511669660455, 0.0075062472617076683, 0.4), (-428.55364086573934, 0.010013473594127553, 0.6000000000000001), (-392.90460539841831, 0.024061883325341787, 0.8), (-339.86202897346425, 0.051447884314764734, 1.0), (-269.87927924742837, 0.041626252162613092, 1.2), (-217.80948027104569, 0.052816673121045758, 1.4000000000000001), (-184.22152797419636, 0.045399423958706858, 1.6), (-157.97635385921754, 0.031877633167962931, 1.7999999999999998), (-137.67614024068095, 0.025523443247266395, 2.0), (-123.4083384059512, 0.048047374264508683, 2.2), (-113.81020798429468, 0.035798531615325611, 2.4000000000000004), (-102.01620812491977, 0.027756871720660766, 2.6000000000000005), (-94.289370506691469, 0.035395395826169497, 2.8000000000000003), (-87.52693269379435, 0.025803539713599138, 3.000000000000001), (-82.488815035792967, 0.03393312680765085, 3.2), (-79.365898800796288, 0.038793851349457759, 3.4000000000000004), (-74.402258229445053, 0.038513461740854078, 3.6000000000000005), (-69.709894862346871, 0.024666214905798976, 3.8000000000000003), (-62.391131422316143, 0.050009008173874471, 4.0), (-61.432358574778334, 0.027242966967044126, 4.2), (-59.394412389104588, 0.018197166835043965, 4.4), (-54.575903803815834, 0.034615490762261253, 4.6000000000000005), (-54.495587671640187, 0.010666758106185023, 4.800000000000001), (-51.572643346611379, 0.033600261827790821, 5.000000000000001), (-52.801253044874727, 0.045546159470943801, 5.2), (-49.010834209654881, 0.0290583360069381, 5.4), (-44.646749111369424, 0.028824187617819155, 5.6000000000000005), (-47.214971254683235, 0.044632058228190351, 5.800000000000001), (-42.318428628047329, 0.031459965571918193, 6.000000000000002), (-41.125411117335076, 0.040933166346931879, 6.2), (-38.622272916114134, 0.043511358629980824, 6.4), (-39.204649488566922, 0.018862291051112146, 6.600000000000001), (-37.188791283240846, 0.039300100078692016, 6.800000000000001), (-37.436397559436799, 0.020521412188645342, 7.0), (-33.78339501332767, 0.033250250144352282, 7.199999999999999), (-32.838713786685531, 0.027693424350580566, 7.400000000000001), (-32.103984646135416, 0.02717600687983571, 7.6000000000000005), (-30.306052494464367, 0.036934562897959149, 7.800000000000001), (-30.216918764878301, 0.024423803625436818, 8.0), (-27.840032175724282, 0.056431923492236732, 8.2), (-32.016463842664358, 0.040235875091418939, 8.4), (-29.280205129079398, 0.027774270709841141, 8.6), (-27.069362696589877, 0.049903494767388833, 8.799999999999999), (-30.596956026773292, 0.02406582328612519, 9.0), (-25.950714061875207, 0.041682913154804067, 9.2), (-28.131414120216828, 0.024295201182395185, 9.4), (-26.726941448523085, 0.026634763415584357, 9.6), (-25.792079487826747, 0.033643936472003561, 9.8)]
#    Results2 = pool.map(Ising_Energy, Beta)
#    print "Results2:"
#    print Results2
    Results = [-1004.7795484593444, -985.47883711734505, -963.88379905237332, -942.28248235327408, -923.19703419171412, -898.45615936531033, -872.54339878217024, -851.44713141060606, -820.31595618171275, -793.43501382019826, -754.70391707425438, -713.77887106142919, -671.4098851023515, -631.23577800285261, -598.62106371519269, -569.62034085886637, -541.94695363371306, -512.35615942088248, -487.35271295299378, -461.30557512273606, -432.18807933153704, -407.20316319626062, -386.55786070406646, -371.28954039240909, -346.91373330063664, -333.81436737088029, -320.81983687843314, -303.11502799083877, -294.19526708555793, -277.45997563382235, -267.79504538920611, -254.72504143674379, -250.75793571282369, -247.76081167486308, -231.39631627272988, -219.98032840384451, -214.06230445599365, -208.27236689831236, -210.98633654858264, -201.3440691438885, -197.07497626676718, -194.19465020720327, -184.59786898957034, -184.88921227346466, -175.67768100515622, -168.67282789027678, -167.48052073403497, -161.04192774283493, -162.39088805974254, -150.21239256929573, -149.90724769465405, -148.68497548502805, -148.45410373368122, -140.9401774454814, -144.01775094080637, -131.63640709831668, -137.71997435063429, -129.80221253544039, -130.03578587976418, -134.20745840195869, -120.82766948498967, -122.72918360911703, -116.68761246195604, -120.83733596799215, -116.75781288792581, -120.49393196154502, -117.14329706059914, -119.33100549573963, -112.13127841954967, -111.65753049376197, -110.97260819648959, -111.62208519804676, -102.51544328763561, -97.14493138010657, -100.10587860731495, -101.32212924781402, -102.42416092065154, -100.42369264914299, -101.30312859344207, -94.913596939509645, -98.550473601292367, -93.019613380596141, -90.47783662929379, -91.206243985725109, -92.156414229627501, -85.68573801154615, -89.361272427994962, -89.966874360570543, -88.162597427940753, -87.310324535547196, -81.775846562071763, -83.550424730226439, -81.355185521772199, -79.919245331480965, -76.265341851900828, -78.183096750358104, -72.938352502510256, -75.509977731400539]
    Results2 = [-499.37150898268897, -485.62725416608401, -472.04761935151447, -457.57000673392787, -443.26477305224154, -428.68303488408958, -412.59605758833953, -392.96317831116056, -370.54044980770743, -344.28210466302278, -311.55132318588079, -270.69289527292068, -240.11620055921318, -217.26112055020602, -200.81265553171815, -188.665178456261, -171.90767701140095, -162.8365571408996, -148.97455882336459, -139.39959715825154, -137.78296315118968, -125.68128528994369, -119.7085652327093, -115.15947689376935, -105.14064271328157, -106.66754436610846, -98.461341733382739, -100.62428399088536, -90.354074398785158, -88.519300624956855, -86.122138394569248, -81.132128564453865, -78.17223694334767, -76.363113956577138, -74.21223373956407, -71.409220813246193, -69.872692703502111, -67.945149550476614, -67.893123327897314, -67.187151795436094, -62.71974419229678, -65.82550786588429, -58.683996894659302, -60.886526014059612, -57.439313702997431, -56.390102109573604, -52.982462110872824, -55.312636739926745, -52.395276676653751, -51.600265317914371, -48.417292336712663, -49.79634105427084, -47.111057222964071, -48.244641965348713, -47.33067192505144, -49.402431504224815, -48.183939341928429, -45.43555074892393, -42.773803549797506, -45.3912137939218, -42.205137910068423, -39.561267946053086, -42.097362625926863, -37.231532908939968, -38.897295924727473, -38.917041724057967, -37.65301219826658, -38.179327398991504, -37.597856463688878, -37.149073859314043, -34.532256345997936, -36.487341100136348, -31.633427666482302, -33.215395709228495, -33.135355348033791, -35.715405074825959, -34.786308746362131, -34.717775642120948, -35.196593376506641, -29.764264247857557, -29.56090300733608, -33.100884567481515, -30.775402596141845, -30.397622419193006, -30.917702642818558, -32.068526076976561, -33.872978237488553, -27.951346883495201, -28.067243482936121, -25.356221813620916, -29.557710401279579, -27.468657931706574, -27.592854871043588, -29.262408549129109, -28.506369567523198, -27.485617588892879, -24.934358044327404, -29.074334560022823]
    Results3 = [-1011.0791723842847, -998.17898912110115, -984.22213969252084, -971.70618702449315, -958.68930437110328, -944.43973442045012, -932.29381644576586, -915.58791841547986, -899.29559373867573, -884.68190453925592, -870.9172615639136, -854.18366856507407, -835.89853956313698, -820.95141317511752, -802.4803054061191, -782.67936947755561, -762.74511820828207, -738.86248698524548, -716.57161013688119, -685.44588255963811, -639.85622153899476, -610.71718112478277, -574.87850269922535, -542.65844658285789, -505.90391497362725, -488.88241941298804, -458.62364959165257, -436.03045817313262, -419.10229879639581, -398.59752011529827, -381.20805520313377, -362.99196937132632, -354.73077504174108, -341.3572202601469, -327.29947798774248, -317.3691783090253, -310.63775570210043, -293.82512999504905, -289.71549485988987, -279.91807642059803, -274.9969887734527, -260.95116993168205, -260.95927708535623, -254.69302881752077, -248.36838784995433, -242.41145058228841, -229.42345125820293, -231.85969278861521, -225.12822075099496, -207.09837756528665, -212.5711213052746, -211.56096203756741, -199.36336866881817, -195.62326221897737, -197.83213216157807, -192.28268369352008, -196.77782956012956, -183.39969630326652, -180.91106110854477, -177.294021957067, -175.47775115671595, -173.46447849699405, -162.55078239098731, -164.99680961994022, -158.83278269353963, -158.21254698994233, -150.57174333418192, -161.74089094741689, -155.4911851288532, -153.09051272465868, -145.85766102680915, -152.69538065260483, -149.81132999559094, -140.46375912356086, -145.04817808425847, -128.12521764536527, -130.50286596696779, -137.00553441240635, -135.86965440303419, -125.29803358204808, -130.97398231198324, -124.65223361387986, -128.90350638554452, -125.69978106368595, -131.50273225814652, -121.92943305933784, -116.83038088826672, -117.56555075858019, -122.59934902607131, -113.16901373292029, -115.8455189753255, -112.42074427108633, -114.44974988219781, -110.72677738716543, -101.11214245135251, -111.04727292714645, -106.46738488837067, -105.67503229979893]

#    Results3 = pool.map(A_Energy, Beta)
#    print "Results3:"
#    print Results3
#    Results3 = [-997.93638023387405, -972.03930569626607, -945.53532311868366, -914.36932625562906, -885.45864361352437, -858.02211929524833, -824.7471883068124, -782.66633818254434, -739.38021935130291, -691.10011889242287, -608.50567768802932, -543.17165593461277, -477.12378026275491, -433.18783167096359, -399.23942846341419, -362.72934448170292, -334.93659888831905, -319.26823083311405, -302.0580526240966, -281.06245671794687, -257.47418162832963, -246.76374198854143, -239.9765761353074, -233.94612463694386, -211.8820363049588, -210.57530200208438, -203.1083587151349, -192.41366497483071, -184.86145688893635, -171.68746270634725, -176.46314362183236, -159.19739971960038, -164.93821181266773, -155.28112392042433, -151.1096833215681, -143.27143102685355, -145.7629790476683, -141.66238674402246, -130.16614513664524, -135.73543610367858, -128.11653350756328, -118.70524815252033, -123.08067093043601, -112.00113722734292, -116.03725508465683, -113.49280342756664, -105.47971102535729, -108.85952049572023, -100.15630844135941]

#    Results = [-1004.5266737443328, -983.96140308527879, -964.26503488310573, -943.06385231662523, -921.81324780265777, -899.08614520685865, -875.92065894850805, -849.87791417826861, -821.22765985977776, -790.89493890282642, -750.88818746125753, -712.39371673196445, -670.06600693925554, -630.12260984049078, -601.64524790631788, -558.61874620594051, -534.39581448718616, -513.78314339873737, -486.17826110468985, -459.23976839185082, -433.97930816367966, -412.79003969836151, -391.4441690138691, -368.14856690517996, -344.66143230215812, -332.39604904915865, -316.77084550029087, -302.79016934739332, -291.9171551853762, -276.52086631479892, -267.83799597911519, -259.30456560907544, -252.81549347409734, -241.04479696615701, -230.88249619266333, -224.38152804764118, -222.59319756696968, -216.32335231455144, -211.45421163317536, -199.60412989056601, -192.49701508835298, -186.70021999851258, -187.31261740999469, -177.47560521340188, -176.85919608425647, -178.03367706916771, -171.49864414485666, -161.47029929265761, -162.3179918916257, -152.67377304168943, -159.09037995669303, -151.02184818070754, -148.14807224464681, -141.21496737024654, -141.3541854961498, -139.95355571922912, -132.56598027863078, -132.42680527334929, -134.88608005305082, -130.27966246363172, -125.32127969122915, -125.40454087492763, -116.97472354629583, -122.59787516854117, -118.04983219638896, -121.93008961225125, -111.10541792152203, -116.37492775725512, -116.2054323351888, -103.77348497898802, -103.92391703775294, -107.79813425803722, -105.02346993750129, -106.02923927296503, -104.73243267230903, -101.979530669677, -103.71218310921459, -95.171923626914804, -99.117121850115097, -95.906510895630689, -95.939476851765974, -90.603650964719151, -90.261380382964973, -90.185387766077156, -91.475987944216243, -91.887944284193026, -91.290425444608644, -83.528288524395435, -88.106964422602758, -85.960464874171294, -81.602237822425479, -78.700226844845346, -79.366781032717086, -85.338178730201875, -87.300565908197441, -80.11759021814062, -80.223592515170353, -76.833871493991239, -76.676323285869927]
#    Results2 =[-499.00208978063256, -485.79049738552601, -472.45502154094731, -457.28671807694343, -443.24642684498411, -426.77710098162419, -411.90276280013882, -392.63952133426687, -373.68106091733654, -344.51961112622422, -308.67230724334564, -279.95881688734886, -239.49623607107921, -220.65229834738375, -201.51471618440564, -184.16475364289559, -170.65238086726023, -158.45455496549408, -148.41449347335507, -138.74404483625077, -134.48509811337158, -126.35637997966649, -118.77339853805195, -109.39216009603982, -111.64022470020871, -103.71909379324266, -97.02477311765729, -92.421396609830495, -94.206597030271382, -89.592330207237794, -83.206115791193938, -85.636051634388082, -79.488046222713109, -80.984905858439944, -76.604709375303841, -75.934636211849011, -71.660807211293218, -69.970995165095374, -66.686851327605069, -70.235542843914317, -59.562250423837632, -61.299641018672844, -61.587983550286332, -64.409707714393932, -57.605326647947351, -59.66166483161431, -56.766964746642998, -56.528635166747996, -53.936883084883704, -50.606059931290851, -52.029732390870784, -51.583011758531214, -45.963729726423566, -51.997337669375796, -47.716813149947434, -46.240217076977743, -45.415959880960699, -44.73621458084618, -45.770792923586349, -44.953083399646118, -46.152785338891476, -43.623922327071242, -42.720796442058329, -38.927529588889534, -38.134029564997469, -37.729162299107649, -40.557350187662237, -37.345713918563163, -39.437908136653562, -36.91263071797367, -33.854032473932264, -34.402611117213119, -33.683467455140025, -36.094955213593643, -33.349403569252793, -31.378866848278225, -36.430621010228016, -33.679738575939162, -30.210773203203004, -32.254036624080591, -32.150690871359522, -32.047077099132842, -32.554457874190192, -34.538022973073616, -29.041118319915189, -29.896919428566097, -31.50935842118465, -28.233381414862173, -32.029932397093262, -28.664381664417849, -27.706052655820269, -30.756879997031771, -27.766130596422894, -26.791557912713589, -29.800480155626285, -29.79042938896054, -25.605526493682564, -27.228860982600676, -26.39940222804648]
#    Results3 = [-1011.3188928611185, -998.30462281930886, -985.20240477895015, -971.13613885307564, -958.67832311131747, -944.74350806985956, -930.92994822922708, -917.32363923485855, -901.46919686061585, -887.56261467211345, -869.39826417601125, -854.43950883714888, -838.85549748238975, -823.62966786866366, -801.78915391881492, -785.33666792123336, -754.87364725069199, -742.86524674214047, -712.39936708560924, -683.67113151201181, -657.2046382973283, -614.23332160966754, -585.57710538299102, -537.83404974705286, -509.77336384177448, -482.64608097906842, -453.61433320460293, -436.47523963339472, -414.11775502088813, -396.69919598189273, -386.37236213030536, -363.34021526176178, -354.31910080573283, -338.8811921891874, -330.62465220036927, -318.13623517086205, -306.62592171067138, -304.06355182847034, -290.57484370658358, -281.81812763025692, -264.86770312888632, -272.90032347453024, -261.55784833558283, -258.36039432589195, -235.44602572225727, -240.12673923282492, -235.23765620721559, -225.13273271014361, -227.25174081205989, -212.15986224880103, -218.3340021078466, -206.19527405980972, -201.40786249405232, -200.13494974793568, -196.500877614925, -191.25958377814996, -185.90321438286071, -186.64902561277256, -184.96412463004037, -177.79978386533372, -171.18820007016907, -174.38386419973494, -167.80930685560358, -178.35501989768096, -157.05948091839065, -157.97274040163938, -163.565641574892, -153.87704270463138, -145.51962045136915, -148.74597507078508, -147.00029440602637, -143.64724937523877, -149.76195093214193, -140.20100520044889, -144.70722358532188, -134.97172992898166, -139.0937253424305, -139.57245728017247, -130.20144738125481, -129.29326985626685, -133.80728773902791, -122.00166660115296, -122.40706253820481, -119.11458364476981, -123.31182750459043, -121.9386642121311, -118.74266630090233, -114.66327089555472, -118.89199506890709, -115.92159392975682, -111.27308223890586, -112.67249423798134, -104.58278755801886, -115.71677249299336, -110.7013546878032, -107.9979794424783, -107.72860628157585, -107.66481712557119, -109.09595138521577]
    I_Error = [0. for i in range(int((T_upper-T_lower)/dT))]
    I_plot = [0. for i in range(int((T_upper-T_lower)/dT))]




#    I_AB2= 0.
    SError = 0.
    RError = 0.

    for i in range(int((T_upper-T_lower)/dT)):
        I_AB[i] += dT/N*(2*Results[i]-2*Results2[i] - Results3[i])/(T_lower + i*dT)**2

        Replica_Energies[i] = Results[i]
        S_Energies[i] = Results[i]
        R_Error[i] = Results[i]
        S_Error[i] = Results[i]

    print I_AB

    for i in range(int((T_upper-T_lower)/dT)):
        for j in range(i, int((T_upper-T_lower)/dT)):
            I_plot[i] += I_AB[j]
            I_Error[i] += np.sqrt(4*S_Error[j]**2 + 4*R_Error[j]**2)/N**2



    plt.plot(Temps2, I_plot)
    plt.title("Replica (Three Simulations)")
    plt.show()

    plt.plot(Temps2, Results)
    plt.title("Replica")
    plt.show()

    plt.plot(Temps2, Results2)
    plt.title("Ising")
    plt.show()

    plt.plot(Temps2, Results3)
    plt.title("A")
    plt.show()


Renyi_Entropy(.2, 10.0, .2)







